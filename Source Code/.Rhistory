testing_data_subset2 <- testing_data[, c("Insulin", "Outcome")]
model2 <- glm(Outcome ~ Insulin, data = training_data, family="binomial")
View(testing_data_subset2)
accuracy <- mean(pred_class == testing_data_subset3$Outcome)
accuracy
# Compare models using AIC/BIC
AIC(model1, model2)
# Compare models using AIC/BIC
AIC(model, model2)
BIC(model1, model2)
BIC(model, model2)
library(ROCR)
install.packages("ROCR")
library(ROCR)
# Calculate performance measures
performance_obj <- performance(pred_class, "tpr", "fpr")
model <- glm(Outcome ~., data = training_data, family="binomial")
pred_class <- ifelse(predict(model, newdata = testing_data, type = "response") >= 0.5, 1, 0)
accuracy <- mean(pred_class == testing_data$Outcome)
accuracy
# Predict probabilities
predictions <- predict(model, testing_data, type = "response")
# Create a prediction object for ROCR
prediction_obj <- prediction(predictions, testing_data$Outcome)
# Calculate performance measures
performance_obj <- performance(prediction_obj, "tpr", "fpr")
# Plot ROC curve
plot(performance_obj, main = "ROC Curve", col = "blue", lwd = 2)
# Calculate AUC
auc <- performance(prediction_obj, "auc")@y.values[[1]]
cat("Area under the ROC curve (AUC):", auc, "\n")
# Predict probabilities for each model
predictions_model1 <- predict(model, testing_data, type = "response")
predictions_model2 <- predict(model2, testing_data_subset2, type = "response")
predictions_model3 <- predict(model3, testing_data_subset3, type = "response")
# Create prediction objects for ROCR
prediction_obj_model1 <- prediction(predictions_model1, testing_data$Outcome)
prediction_obj_model2 <- prediction(predictions_model2, testing_data_subset2$Outcome)
prediction_obj_model3 <- prediction(predictions_model3, testing_data_subset3$Outcome)
# Calculate performance measures for each model
performance_obj_model1 <- performance(prediction_obj_model1, "tpr", "fpr")
performance_obj_model2 <- performance(prediction_obj_model2, "tpr", "fpr")
performance_obj_model3 <- performance(prediction_obj_model3, "tpr", "fpr")
# Create an empty plot
plot(performance_obj_model1, col = "white", lwd = 2,
main = "ROC Curve Comparison", xlab = "False Positive Rate", ylab = "True Positive Rate")
# Add ROC curves for all three models
plot(performance_obj_model1, col = "blue", lwd = 2, add = TRUE)
plot(performance_obj_model2, col = "red", lwd = 2, add = TRUE)
plot(performance_obj_model3, col = "green", lwd = 2, add = TRUE)
# Add legend
legend("bottomright", legend = c("Model 1", "Model 2", "Model 3"), col = c("blue", "red", "green"), lwd = 2)
# Calculate AUC for each model
auc_model1 <- performance(prediction_obj_model1, "auc")@y.values[[1]]
auc_model2 <- performance(prediction_obj_model2, "auc")@y.values[[1]]
auc_model3 <- performance(prediction_obj_model3, "auc")@y.values[[1]]
cat("Area under the ROC curve (AUC) - Model 1:", auc_model1, "\n")
cat("Area under the ROC curve (AUC) - Model 2:", auc_model2, "\n")
cat("Area under the ROC curve (AUC) - Model 3:", auc_model3, "\n")
testing_data_subset2 <- testing_data[, c("Glucose", "Outcome")]
model <- glm(Outcome ~., data = training_data, family="binomial")
model2 <- glm(Outcome ~ Insulin, data = training_data, family="binomial")
model3 <- glm(Outcome ~ Glucose + DiabetesPedigreeFunction, data = training_data, family="binomial")
model2 <- glm(Outcome ~ Glucose, data = training_data, family="binomial")
model <- glm(Outcome ~., data = training_data, family="binomial")
model2 <- glm(Outcome ~ Glucose, data = training_data, family="binomial")
model3 <- glm(Outcome ~ Glucose + DiabetesPedigreeFunction, data = training_data, family="binomial")
testing_data_subset2 <- testing_data[, c("Glucose", "Outcome")]
testing_data_subset3 <- testing_data[, c("Glucose", "DiabetesPedigreeFunction", "Outcome")]
# Predict probabilities for each model
predictions_model1 <- predict(model, testing_data, type = "response")
predictions_model2 <- predict(model2, testing_data_subset2, type = "response")
predictions_model3 <- predict(model3, testing_data_subset3, type = "response")
# Create prediction objects for ROCR
prediction_obj_model1 <- prediction(predictions_model1, testing_data$Outcome)
prediction_obj_model2 <- prediction(predictions_model2, testing_data_subset2$Outcome)
prediction_obj_model3 <- prediction(predictions_model3, testing_data_subset3$Outcome)
# Calculate performance measures for each model
performance_obj_model1 <- performance(prediction_obj_model1, "tpr", "fpr")
performance_obj_model2 <- performance(prediction_obj_model2, "tpr", "fpr")
performance_obj_model3 <- performance(prediction_obj_model3, "tpr", "fpr")
# Create an empty plot
plot(performance_obj_model1, col = "white", lwd = 2,
main = "ROC Curve Comparison", xlab = "False Positive Rate", ylab = "True Positive Rate")
# Add ROC curves for all three models
plot(performance_obj_model1, col = "blue", lwd = 2, add = TRUE)
plot(performance_obj_model2, col = "red", lwd = 2, add = TRUE)
plot(performance_obj_model3, col = "green", lwd = 2, add = TRUE)
# Add legend
legend("bottomright", legend = c("Model 1", "Model 2", "Model 3"), col = c("blue", "red", "green"), lwd = 2)
# Calculate AUC for each model
auc_model1 <- performance(prediction_obj_model1, "auc")@y.values[[1]]
auc_model2 <- performance(prediction_obj_model2, "auc")@y.values[[1]]
auc_model3 <- performance(prediction_obj_model3, "auc")@y.values[[1]]
cat("Area under the ROC curve (AUC) - Model 1:", auc_model1, "\n")
cat("Area under the ROC curve (AUC) - Model 2:", auc_model2, "\n")
cat("Area under the ROC curve (AUC) - Model 3:", auc_model3, "\n")
model2 <- glm(Outcome ~ BMI, data = training_data, family="binomial")
model3 <- glm(Outcome ~ Insulin + DiabetesPedigreeFunction, data = training_data, family="binomial")
testing_data_subset2 <- testing_data[, c("MBI", "Outcome")]
testing_data_subset3 <- testing_data[, c("Insulin", "Outcome")]
testing_data_subset2 <- testing_data[, c("BMI", "Outcome")]
testing_data_subset3 <- testing_data[, c("Insulin", "Outcome")]
model2 <- glm(Outcome ~ BMI, data = training_data, family="binomial")
model3 <- glm(Outcome ~ Insulin, data = training_data, family="binomial")
# Predict probabilities for each model
predictions_model1 <- predict(model, testing_data, type = "response")
predictions_model2 <- predict(model2, testing_data_subset2, type = "response")
predictions_model3 <- predict(model3, testing_data_subset3, type = "response")
# Create prediction objects for ROCR
prediction_obj_model1 <- prediction(predictions_model1, testing_data$Outcome)
prediction_obj_model2 <- prediction(predictions_model2, testing_data_subset2$Outcome)
prediction_obj_model3 <- prediction(predictions_model3, testing_data_subset3$Outcome)
# Calculate performance measures for each model
performance_obj_model1 <- performance(prediction_obj_model1, "tpr", "fpr")
performance_obj_model2 <- performance(prediction_obj_model2, "tpr", "fpr")
performance_obj_model3 <- performance(prediction_obj_model3, "tpr", "fpr")
# Create an empty plot
plot(performance_obj_model1, col = "white", lwd = 2,
main = "ROC Curve Comparison", xlab = "False Positive Rate", ylab = "True Positive Rate")
# Add ROC curves for all three models
plot(performance_obj_model1, col = "blue", lwd = 2, add = TRUE)
plot(performance_obj_model2, col = "red", lwd = 2, add = TRUE)
plot(performance_obj_model3, col = "green", lwd = 2, add = TRUE)
# Add legend
legend("bottomright", legend = c("Model 1", "Model 2", "Model 3"), col = c("blue", "red", "green"), lwd = 2)
# Calculate AUC for each model
auc_model1 <- performance(prediction_obj_model1, "auc")@y.values[[1]]
auc_model2 <- performance(prediction_obj_model2, "auc")@y.values[[1]]
auc_model3 <- performance(prediction_obj_model3, "auc")@y.values[[1]]
cat("Area under the ROC curve (AUC) - Model 1:", auc_model1, "\n")
cat("Area under the ROC curve (AUC) - Model 2:", auc_model2, "\n")
cat("Area under the ROC curve (AUC) - Model 3:", auc_model3, "\n")
testing_data_subset2 <- testing_data[, c("Glucose", "Outcome")]
testing_data_subset3 <- testing_data[, c("Glucose", "DiabetesPedigreeFunction", "Outcome")]
model2 <- glm(Outcome ~ Glucose, data = training_data, family="binomial")
model3 <- glm(Outcome ~ Glucose + DiabetesPedigreeFunction, data = training_data, family="binomial")
# Add legend
legend("bottomright", legend = c("All variables", "Only Glucose", "Glucose and DPF"), col = c("blue", "red", "green"), lwd = 2)
# Add legend
legend("bottomright", legend = c("All variables", "Only Glucose", "Glucose and DPF"), col = c("blue", "red", "green"), lwd = 1)
# Add legend
legend("bottomright", legend = c("All variables", "Only Glucose", "Glucose and DPF"), col = c("blue", "red", "green"), lwd = 2)
# Add legend
legend("bottomright", legend = c("All variables", "Only Glucose", "Glucose and DPF"), col = c("blue", "red", "green"), lwd = 2)
# Calculate AUC for each model
auc_model1 <- performance(prediction_obj_model1, "auc")@y.values[[1]]
auc_model2 <- performance(prediction_obj_model2, "auc")@y.values[[1]]
auc_model3 <- performance(prediction_obj_model3, "auc")@y.values[[1]]
# Add ROC curves for all three models
plot(performance_obj_model1, col = "blue", lwd = 2, add = TRUE)
plot(performance_obj_model2, col = "red", lwd = 2, add = TRUE)
plot(performance_obj_model3, col = "green", lwd = 2, add = TRUE)
# Add legend
legend("bottomright", legend = c("All variables", "Only Glucose", "Glucose and DPF"), col = c("blue", "red", "green"), lwd = 2)
# Add legend
legend("bottomright", legend = c("All variables", "Only Glucose", "Glucose and DPF"),
col = c("blue", "red", "green"), lwd = 2, cex = 0.8)
# Create an empty plot
plot(performance_obj_model1, col = "white", lwd = 2,
main = "ROC Curve Comparison", xlab = "False Positive Rate", ylab = "True Positive Rate")
# Add ROC curves for all three models
plot(performance_obj_model1, col = "blue", lwd = 2, add = TRUE)
plot(performance_obj_model2, col = "red", lwd = 2, add = TRUE)
plot(performance_obj_model3, col = "green", lwd = 2, add = TRUE)
# Add legend
legend("bottomright", legend = c("All variables", "Only Glucose", "Glucose and DPF"),
col = c("blue", "red", "green"), lwd = 2, cex = 0.8)
# Create an empty plot
plot(performance_obj_model1, col = "white", lwd = 2,
main = "ROC Curve Comparison", xlab = "False Positive Rate", ylab = "True Positive Rate")
# Add legend
legend("bottomright", legend = c("All variables", "Only Glucose", "Glucose and DPF"),
col = c("blue", "red", "green"), lwd = 2, cex = 0.7)
# Add ROC curves for all three models
plot(performance_obj_model1, col = "blue", lwd = 2, add = TRUE)
plot(performance_obj_model2, col = "red", lwd = 2, add = TRUE)
plot(performance_obj_model3, col = "green", lwd = 2, add = TRUE)
# Calculate AUC for each model
auc_model1 <- performance(prediction_obj_model1, "auc")@y.values[[1]]
auc_model2 <- performance(prediction_obj_model2, "auc")@y.values[[1]]
auc_model3 <- performance(prediction_obj_model3, "auc")@y.values[[1]]
cat("Area under the ROC curve (AUC) - Model 1:", auc_model1, "\n")
cat("Area under the ROC curve (AUC) - Model 2:", auc_model2, "\n")
cat("Area under the ROC curve (AUC) - Model 3:", auc_model3, "\n")
cat("Area under the ROC curve (AUC) - All variables:", auc_model1, "\n")
cat("Area under the ROC curve (AUC) - Only Glucose:", auc_model2, "\n")
cat("Area under the ROC curve (AUC) - Glucose and DPF:", auc_model3, "\n")
# Show the confusion matrix
print(conf_matrix)
# Convertiți matricea de confuzie într-un cadru de date
conf_matrix_df <- as.data.frame(as.table(conf_matrix))
# Redenumiți coloanele
colnames(conf_matrix_df) <- c("Actual", "Predicted", "Count")
# Creați graficul
ggplot(data = conf_matrix_df, aes(x = Actual, y = Predicted)) +
geom_tile(aes(fill = Count), colour = "white") +
geom_text(aes(label = sprintf("%1.0f", Count)), vjust = 1) +
scale_fill_gradient(low = "white", high = "steelblue") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1),
axis.text.y = element_text(size = 12)) +
labs(fill = "Count", x = "Actual Outcome", y = "Predicted Outcome",
title = "Confusion Matrix")
library(ggplot2)
# Creați graficul
ggplot(data = conf_matrix_df, aes(x = Actual, y = Predicted)) +
geom_tile(aes(fill = Count), colour = "white") +
geom_text(aes(label = sprintf("%1.0f", Count)), vjust = 1) +
scale_fill_gradient(low = "white", high = "steelblue") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1),
axis.text.y = element_text(size = 12)) +
labs(fill = "Count", x = "Actual Outcome", y = "Predicted Outcome",
title = "Confusion Matrix")
# Convertiți matricea de confuzie într-un cadru de date
conf_matrix_df <- as.data.frame(as.table(conf_matrix))
# Redenumiți coloanele
colnames(conf_matrix_df) <- c("Actual", "Predicted", "Count")
# Creați graficul
ggplot(data = conf_matrix_df, aes(x = Actual, y = Predicted)) +
geom_tile(aes(fill = Count), colour = "white") +
geom_text(aes(label = sprintf("%1.0f", Count)), vjust = 1) +
scale_fill_gradient(low = "white", high = "steelblue") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1),
axis.text.y = element_text(size = 12)) +
labs(fill = "Count", x = "Actual Outcome", y = "Predicted Outcome",
title = "Confusion Matrix")
# Reordonați matricea de confuzie
conf_matrix <- conf_matrix[c(2, 1), c(2, 1)]
# Convertiți matricea de confuzie într-un cadru de date
conf_matrix_df <- as.data.frame(as.table(conf_matrix))
# Redenumiți coloanele
colnames(conf_matrix_df) <- c("Actual", "Predicted", "Count")
# Creați graficul
ggplot(data = conf_matrix_df, aes(x = Actual, y = Predicted)) +
geom_tile(aes(fill = Count), colour = "white") +
geom_text(aes(label = sprintf("%1.0f", Count)), vjust = 1) +
scale_fill_gradient(low = "white", high = "steelblue") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1),
axis.text.y = element_text(size = 12)) +
labs(fill = "Count", x = "Actual Outcome", y = "Predicted Outcome",
title = "Confusion Matrix")
# Redenumiți coloanele și rândurile matricei de confuzie
rownames(conf_matrix) <- c("Predicted Positive", "Predicted Negative")
colnames(conf_matrix) <- c("Actual Positive", "Actual Negative")
# Convertiți matricea de confuzie într-un cadru de date
conf_matrix_df <- as.data.frame(as.table(conf_matrix))
# Redenumiți coloanele
colnames(conf_matrix_df) <- c("Actual", "Predicted", "Count")
# Creați graficul
ggplot(data = conf_matrix_df, aes(x = Actual, y = Predicted)) +
geom_tile(aes(fill = Count), colour = "white") +
geom_text(aes(label = sprintf("%1.0f", Count)), vjust = 1) +
scale_fill_gradient(low = "white", high = "steelblue") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1),
axis.text.y = element_text(size = 12)) +
labs(fill = "Count", x = "Actual Outcome", y = "Predicted Outcome",
title = "Confusion Matrix")
# Redenumiți coloanele și rândurile matricei de confuzie
rownames(conf_matrix) <- c("Predicted Positive", "Predicted Negative")
colnames(conf_matrix) <- c("Actual Positive", "Actual Negative")
# Convertiți matricea de confuzie într-un cadru de date
conf_matrix_df <- as.data.frame(as.table(conf_matrix))
# Redenumiți coloanele
colnames(conf_matrix_df) <- c("Actual", "Predicted", "Count")
# Creați graficul
ggplot(data = conf_matrix_df, aes(x = Actual, y = Predicted)) +
geom_tile(aes(fill = Count), colour = "white") +
geom_text(aes(label = sprintf("%1.0f", Count)), vjust = 1) +
scale_fill_gradient(low = "white", high = "steelblue") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1),
axis.text.y = element_text(size = 12)) +
labs(fill = "Count", x = "Actual Outcome", y = "Predicted Outcome",
title = "Confusion Matrix")
# Convertirea matricei de confuzie într-un data frame pentru a fi utilizat în ggplot
conf_matrix_melted <- as.data.frame(as.table(conf_matrix))
# Redenumirea coloanelor pentru claritate
colnames(conf_matrix_melted) <- c("True Class", "Predicted Class", "Frequency")
# Crearea graficului cu ggplot2
library(ggplot2)
ggplot(data = conf_matrix_melted, aes(x = `True Class`, y = `Predicted Class`)) +
geom_tile(aes(fill = `Frequency`), color = 'white') +
geom_text(aes(label = sprintf("%d", `Frequency`)), vjust = 1) +
scale_fill_gradient(low="white", high="green") +
theme_minimal() +
theme(axis.text.x=element_text(angle=45,hjust=1)) +
labs(fill='Frequency', x='True Class', y='Predicted Class', title='Confusion Matrix')
# Convertirea matricei de confuzie într-un data frame pentru a fi utilizat în ggplot
conf_matrix_melted <- as.data.frame(as.table(conf_matrix))
# Redenumirea coloanelor pentru claritate
colnames(conf_matrix_melted) <- c("Predicted Class", "True Class", "Frequency")
# Crearea graficului cu ggplot2
library(ggplot2)
ggplot(data = conf_matrix_melted, aes(x = `True Class`, y = `Predicted Class`)) +
geom_tile(aes(fill = `Frequency`), color = 'white') +
geom_text(aes(label = sprintf("%d", `Frequency`)), vjust = 1) +
scale_fill_gradient(low="white", high="green") +
theme_minimal() +
theme(axis.text.x=element_text(angle=45,hjust=1)) +
labs(fill='Frequency', x='True Class', y='Predicted Class', title='Confusion Matrix')
# Convertirea matricei de confuzie într-un data frame pentru a fi utilizat în ggplot
conf_matrix_melted <- as.data.frame(as.table(conf_matrix))
# Redenumirea coloanelor pentru claritate
colnames(conf_matrix_melted) <- c("Predicted Class", "True Class", "Frequency")
# Inversarea ordinii factorilor pentru Predicted Class
conf_matrix_melted$`Predicted Class` <- factor(conf_matrix_melted$`Predicted Class`, levels = rev(levels(conf_matrix_melted$`Predicted Class`)))
# Crearea graficului cu ggplot2
library(ggplot2)
ggplot(data = conf_matrix_melted, aes(x = `True Class`, y = `Predicted Class`)) +
geom_tile(aes(fill = `Frequency`), color = 'white') +
geom_text(aes(label = sprintf("%d", `Frequency`)), vjust = 1) +
scale_fill_gradient(low="white", high="green") +
theme_minimal() +
theme(axis.text.x=element_text(angle=45,hjust=1)) +
labs(fill='Frequency', x='True Class', y='Predicted Class', title='Confusion Matrix')
# Convertirea matricei de confuzie într-un data frame pentru a fi utilizat în ggplot
conf_matrix_melted <- as.data.frame(as.table(conf_matrix))
# Redenumirea coloanelor pentru claritate
colnames(conf_matrix_melted) <- c("Predicted Class", "True Class", "Frequency")
# Inversarea ordinii factorilor pentru Predicted Class
conf_matrix_melted$`Predicted Class` <- factor(conf_matrix_melted$`Predicted Class`, levels = rev(levels(conf_matrix_melted$`Predicted Class`)))
# Crearea graficului cu ggplot2
library(ggplot2)
ggplot(data = conf_matrix_melted, aes(x = `True Class`, y = `Predicted Class`)) +
geom_tile(aes(fill = `Frequency`), color = 'white') +
geom_text(aes(label = sprintf("%d", `Frequency`)), vjust = 1) +
scale_fill_gradient(low="white", high="darkblue") +
theme_minimal() +
theme(axis.text.x=element_text(angle=45,hjust=1)) +
labs(fill='Frequency', x='Actual Class', y='Predicted Class', title='Confusion Matrix') +
scale_x_discrete(labels=c("Positive" = "Actual Positive", "Negative" = "Actual Negative")) +
coord_flip()
ggplot(data = conf_matrix_melted, aes(x = `True Class`, y = `Predicted Class`)) +
geom_tile(aes(fill = `Frequency`), color = 'white') +
geom_text(aes(label = sprintf("%d", `Frequency`)), vjust = 1) +
scale_fill_gradient(low="white", high="naviblue") +
theme_minimal() +
theme(axis.text.x=element_text(angle=45,hjust=1)) +
labs(fill='Frequency', x='Actual Class', y='Predicted Class', title='Confusion Matrix') +
scale_x_discrete(labels=c("Positive" = "Actual Positive", "Negative" = "Actual Negative")) +
coord_flip()
ggplot(data = conf_matrix_melted, aes(x = `True Class`, y = `Predicted Class`)) +
geom_tile(aes(fill = `Frequency`), color = 'white') +
geom_text(aes(label = sprintf("%d", `Frequency`)), vjust = 1) +
scale_fill_gradient(low="white", high="navyblue") +
theme_minimal() +
theme(axis.text.x=element_text(angle=45,hjust=1)) +
labs(fill='Frequency', x='Actual Class', y='Predicted Class', title='Confusion Matrix') +
scale_x_discrete(labels=c("Positive" = "Actual Positive", "Negative" = "Actual Negative")) +
coord_flip()
# Convertirea matricei de confuzie într-un data frame pentru a fi utilizat în ggplot
conf_matrix_melted <- as.data.frame(as.table(conf_matrix))
# Redenumirea coloanelor pentru claritate
colnames(conf_matrix_melted) <- c("Predicted Class", "True Class", "Frequency")
# Inversarea ordinii factorilor pentru Predicted Class
conf_matrix_melted$`Predicted Class` <- factor(conf_matrix_melted$`Predicted Class`, levels = rev(levels(conf_matrix_melted$`Predicted Class`)))
# Crearea graficului cu ggplot2
library(ggplot2)
ggplot(data = conf_matrix_melted, aes(x = `True Class`, y = `Predicted Class`)) +
geom_tile(aes(fill = `Frequency`), color = 'white') +
geom_text(aes(label = sprintf("%d", `Frequency`)), vjust = 1) +
scale_fill_gradient(low="white", high="darkblue") +
theme_minimal() +
theme(axis.text.x=element_text(angle=45,hjust=1)) +
labs(fill='Frequency', x='Actual Class', y='Predicted Class', title='Confusion Matrix') +
scale_x_discrete(labels=c("Positive" = "Actual Positive", "Negative" = "Actual Negative")) +
coord_flip()
ggplot(data = conf_matrix_melted, aes(x = `True Class`, y = `Predicted Class`)) +
geom_tile(aes(fill = `Frequency`), color = 'white') +
geom_text(aes(label = sprintf("%d", `Frequency`)), vjust = 1) +
scale_fill_gradient(low="white", high="blue") +
theme_minimal() +
theme(axis.text.x=element_text(angle=45,hjust=1)) +
labs(fill='Frequency', x='Actual Class', y='Predicted Class', title='Confusion Matrix') +
scale_x_discrete(labels=c("Positive" = "Actual Positive", "Negative" = "Actual Negative")) +
coord_flip()
ggplot(data = conf_matrix_melted, aes(x = `True Class`, y = `Predicted Class`)) +
geom_tile(aes(fill = `Frequency`), color = 'white') +
geom_text(aes(label = sprintf("%d", `Frequency`)), vjust = 1) +
scale_fill_gradient(low="white", high="lightblue") +
theme_minimal() +
theme(axis.text.x=element_text(angle=45,hjust=1)) +
labs(fill='Frequency', x='Actual Class', y='Predicted Class', title='Confusion Matrix') +
scale_x_discrete(labels=c("Positive" = "Actual Positive", "Negative" = "Actual Negative")) +
coord_flip()
# Convertirea matricei de confuzie într-un data frame pentru a fi utilizat în ggplot
conf_matrix_melted <- as.data.frame(as.table(conf_matrix))
# Redenumirea coloanelor pentru claritate
colnames(conf_matrix_melted) <- c("Predicted Class", "True Class", "Frequency")
# Inversarea ordinii factorilor pentru Predicted Class
conf_matrix_melted$`Predicted Class` <- factor(conf_matrix_melted$`Predicted Class`, levels = rev(levels(conf_matrix_melted$`Predicted Class`)))
# Crearea graficului cu ggplot2
library(ggplot2)
ggplot(data = conf_matrix_melted, aes(x = `True Class`, y = `Predicted Class`)) +
geom_tile(aes(fill = `Frequency`), color = 'white') +
geom_text(aes(label = sprintf("%d", `Frequency`)), vjust = 1) +
scale_fill_gradient(low="white", high="navyblue") +
theme_minimal() +
theme(axis.text.x=element_text(angle=45,hjust=1)) +
labs(fill='Frequency', x='Actual Class', y='Predicted Class', title='Confusion Matrix') +
scale_x_discrete(labels=c("Positive" = "Actual Positive", "Negative" = "Actual Negative")) +
coord_flip()
# Convertirea matricei de confuzie într-un data frame pentru a fi utilizat în ggplot
conf_matrix_melted <- as.data.frame(as.table(conf_matrix))
# Redenumirea coloanelor pentru claritate
colnames(conf_matrix_melted) <- c("Predicted Class", "True Class", "Frequency")
# Inversarea ordinii factorilor pentru Predicted Class
conf_matrix_melted$`Predicted Class` <- factor(conf_matrix_melted$`Predicted Class`, levels = rev(levels(conf_matrix_melted$`Predicted Class`)))
# Crearea graficului cu ggplot2
library(ggplot2)
ggplot(data = conf_matrix_melted, aes(x = `True Class`, y = `Predicted Class`)) +
geom_tile(aes(fill = `Frequency`), color = 'white') +
geom_text(aes(label = sprintf("%d", `Frequency`)), vjust = 1) +
scale_fill_gradient(low="white", high="green") +
theme_minimal() +
theme(axis.text.x=element_text(angle=45,hjust=1)) +
labs(fill='Frequency', x='True Class', y='Predicted Class', title='Confusion Matrix')
ggplot(data = conf_matrix_melted, aes(x = `True Class`, y = `Predicted Class`)) +
geom_tile(aes(fill = `Frequency`), color = 'white') +
geom_text(aes(label = sprintf("%d", `Frequency`)), vjust = 1) +
scale_fill_gradient(low="white", high="lightblue") +
theme_minimal() +
theme(axis.text.x=element_text(angle=45,hjust=1)) +
labs(fill='Frequency', x='True Class', y='Predicted Class', title='Confusion Matrix')
ggplot(data = conf_matrix_melted, aes(x = `True Class`, y = `Predicted Class`)) +
geom_tile(aes(fill = `Frequency`), color = 'white') +
geom_text(aes(label = sprintf("%d", `Frequency`)), vjust = 1, size = 6) + # mărește dimensiunea fontului aici
scale_fill_gradient(low="white", high="lightblue") +
theme_minimal() +
theme(axis.text.x=element_text(angle=45,hjust=1)) +
labs(fill='Frequency', x='True Class', y='Predicted Class', title='Confusion Matrix')
ggplot(data = conf_matrix_melted, aes(x = `True Class`, y = `Predicted Class`)) +
geom_tile(aes(fill = `Frequency`), color = 'white') +
geom_text(aes(label = sprintf("%d", `Frequency`)), vjust = 1, size = 6) +
scale_fill_gradient(low="white", high="lightblue") +
theme_minimal() +
theme(axis.text.x=element_text(angle=45,hjust=1, size=14), # mărește dimensiunea fontului pentru etichetele axei x
axis.text.y=element_text(size=14), # mărește dimensiunea fontului pentru etichetele axei y
plot.title=element_text(size=16)) + # mărește dimensiunea fontului pentru titlul graficului
labs(fill='Frequency', x='True Class', y='Predicted Class', title='Confusion Matrix')
plot(diabetesv2$Outcome, diabetesv2$Pregnancies)
View(diabetes)
View(diabetes_filtred)
View(diabetesv2)
View(diabetes_summary)
View(diabetes_filtred)
View(diabetes_filtred)
View(diabetesv2)
View(diabetes)
View(diabetesv2)
View(diabetes)
View(diabetesv2)
View(diabetes_filtred)
View(diabetes_filtred)
#Stergerea liniilor care au date lipsă
diabetes_test = diabetes |> filter_at(vars("Glucose", "BloodPressure", "SkinThickness", "Insulin", "BMI"), all_vars(. != 0))
library(ggplot2)
library(ROCR)
library(dplyr)
library(skimr)
library(gt)
library(h2o)
#Stergerea liniilor care au date lipsă
diabetes_test = diabetes |> filter_at(vars("Glucose", "BloodPressure", "SkinThickness", "Insulin", "BMI"), all_vars(. != 0))
#Eliminarea outlierilor
ggplot(diabetes_filtred, aes(y = Glucose)) +
geom_boxplot(fill = "lightgreen", color = "black") +
theme_minimal()
#Eliminarea outlierilor
ggplot(diabetes, aes(y = Glucose)) +
geom_boxplot(fill = "lightgreen", color = "black") +
theme_minimal()
#Eliminarea outlierilor
ggplot(diabetes, aes(y = Insulin)) +
geom_boxplot(fill = "lightgreen", color = "black") +
theme_minimal()
#Eliminarea outlierilor
ggplot(diabetes_filtred, aes(y = Insulin)) +
geom_boxplot(fill = "lightgreen", color = "black") +
theme_minimal()
#Eliminarea outlierilor
ggplot(diabetes, aes(y = BloodPressure)) +
geom_boxplot(fill = "lightgreen", color = "black") +
theme_minimal()
#Eliminarea outlierilor
ggplot(diabetes_filtred, aes(y = BloodPressure)) +
geom_boxplot(fill = "lightgreen", color = "black") +
theme_minimal()
#Eliminarea outlierilor
ggplot(diabetes, aes(y = SkinThickness)) +
geom_boxplot(fill = "lightgreen", color = "black") +
theme_minimal()
#Eliminarea outlierilor
ggplot(diabetes, aes(y = BMI)) +
geom_boxplot(fill = "lightgreen", color = "black") +
theme_minimal()
#Eliminarea outlierilor
ggplot(diabetes_filtred, aes(y = BMI)) +
geom_boxplot(fill = "lightgreen", color = "black") +
theme_minimal()
q()
